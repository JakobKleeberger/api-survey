# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Question(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, question=None, question_type=None, answers=None):  # noqa: E501
        """Question - a model defined in OpenAPI

        :param id: The id of this Question.  # noqa: E501
        :type id: int
        :param question: The question of this Question.  # noqa: E501
        :type question: str
        :param question_type: The question_type of this Question.  # noqa: E501
        :type question_type: str
        :param answers: The answers of this Question.  # noqa: E501
        :type answers: str
        """
        self.openapi_types = {
            'id': int,
            'question': str,
            'question_type': str,
            'answers': str
        }

        self.attribute_map = {
            'id': 'id',
            'question': 'question',
            'question_type': 'question-type',
            'answers': 'answers'
        }

        self._id = id
        self._question = question
        self._question_type = question_type
        self._answers = answers

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Question.


        :return: The id of this Question.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Question.


        :param id: The id of this Question.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def question(self):
        """Gets the question of this Question.


        :return: The question of this Question.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Question.


        :param question: The question of this Question.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def question_type(self):
        """Gets the question_type of this Question.


        :return: The question_type of this Question.
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this Question.


        :param question_type: The question_type of this Question.
        :type question_type: str
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")  # noqa: E501

        self._question_type = question_type

    @property
    def answers(self):
        """Gets the answers of this Question.


        :return: The answers of this Question.
        :rtype: str
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this Question.


        :param answers: The answers of this Question.
        :type answers: str
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")  # noqa: E501

        self._answers = answers
